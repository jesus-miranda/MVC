@model Inspinia_MVC5.Models.OrdenDetalle

@{
    ViewBag.Title = "Pedidos";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Pedidos</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Lista", "Pedidos")
            </li>
            <li>
                @Html.ActionLink("Pedido", "Pedido", new { id = Model.IdOrden })
            </li>
            <li class="active">
                <strong>Ingresar Producto</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
            @Html.ActionLink("Regresar a la Lista", "Pedido", new { id = Model.IdOrden }, new { @class = "btn btn-success" })
        </div>
    </div>
</div>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Ingresar Producto</h5>
                </div>
                <div class="ibox-content">

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true)

                            @Html.HiddenFor(model => model.IdOrden)

                            @*<div class="form-group">
                                    @Html.LabelFor(model => model.IdOrden, "IdOrden", new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("IdOrden", String.Empty)
                                        @Html.ValidationMessageFor(model => model.IdOrden)
                                    </div>
                                </div>*@

                            <div class="form-group">
                                @Html.LabelFor(model => model.IdProducto, "Producto", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("IdProducto", String.Empty)
                                    @Html.ValidationMessageFor(model => model.IdProducto)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.IdFormato, "Formato", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("IdFormato", (IEnumerable<SelectListItem>)ViewBag.IdFormato)
                                    @Html.ValidationMessageFor(model => model.IdFormato)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Cantidad, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Cantidad)
                                    @Html.ValidationMessageFor(model => model.Cantidad)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Facturado, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Facturado, new { htmlAttributes = new { @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.Facturado)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Adicional, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @if (Model.IdOrdenBare == null)
                                    {
                                        @Html.EditorFor(model => model.Adicional, new { htmlAttributes = new { @readonly = "readonly" } })
                                    }
                                    else
                                    {
                                        @Html.EditorFor(model => model.Adicional)
                                    }
                                    @Html.ValidationMessageFor(model => model.Adicional)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Bare, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Bare, new { htmlAttributes = new { @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.Bare)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Costo, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Costo, new { htmlAttributes = new { @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.Costo)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Precio, new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Precio, new { htmlAttributes = new { @readonly = "readonly" } })
                                    @Html.ValidationMessageFor(model => model.Precio)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.IdBodega, "Bodega", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("IdBodega", (IEnumerable<SelectListItem>)ViewBag.IdBodega)
                                    @Html.ValidationMessageFor(model => model.IdBodega)
                                </div>
                            </div>

                            <div class="form-group">
                                @*@Html.LabelFor(model => model.IdOrdenBare, new { @class = "control-label col-md-2" })*@
                                @Html.Label("Pedido Bare", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @*@Html.EditorFor(model => model.IdOrdenBare, new { htmlAttributes = new { @readonly = "readonly" } })*@
                                    @Html.HiddenFor(model => model.IdOrdenBare)
                                    @Html.DisplayFor(model => model.Orden1.Orden1)
                                    @Html.ValidationMessageFor(model => model.IdOrdenBare)
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Estado, "Estado", new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownList("Estado", (IEnumerable<SelectListItem>)ViewBag.Estado)
                                    @Html.ValidationMessageFor(model => model.Estado)
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Guardar" class="btn btn-success" />
                                    @Html.ActionLink("Cancelar", "Pedido", new { id = Model.IdOrden }, new { @class = "btn btn-white" })
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    @Styles.Render("~/plugins/toastrStyles")
}

@section Scripts {
    @Scripts.Render("~/plugins/toastr")

    <script type="text/javascript">
        $(document).ready(function () {
            //Mensajes
            function presentarMensajeToast(_tipo, _msg, _titulo) {
                var shortCutFunction = _tipo;
                var msg = _msg;
                var title = _titulo;
                var $showDuration = 500;
                var $hideDuration = 1100;
                var $timeOut = 7100;
                var $extendedTimeOut = 1100;
                var $showEasing = 'swing';
                var $hideEasing = 'linear';
                var $showMethod = 'fadeIn';
                var $hideMethod = 'fadeOut';

                toastr.options = {
                    closeButton: true,
                    debug: false,
                    progressBar: true,
                    positionClass: 'toast-top-right',
                    onclick: function () {
                        //alert('You can perform some custom action after a toast goes away');
                    },
                    showDuration: 400,
                    hideDuration: 1000,
                    timeOut: 7000,
                    extendedTimeOut: 1000,
                    showEasing: 'swing',
                    hideEasing: 'linear',
                    showMethod: 'fadeIn',
                    hideMethod: 'fadeOut'
                };

                var $toast = toastr[shortCutFunction](msg, title); // Wire up an event handler to a button in the toast, if it exists
            }

            //Producto
            function obtenerDatosProducto() {
                var idProducto = $("#IdProducto").val();
                var ifFormato = $("#IdFormato").val();//1-UNIDAD 2-CAJA

                //OBTENER DATOS DE PRODUCTO
                var ventasObtenerProductoUrl = '@Url.Action("ObtenerProducto", "Ventas")';

                $.ajax({
                    url: ventasObtenerProductoUrl,
                    method: 'GET',
                    dataType: 'json',
                    async: true,
                    data: { 'idProducto': idProducto },
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {

                        var respuestas = data.split("|");

                        if (respuestas[0] == "1") {
                            $("#Costo").val(respuestas[1]);

                            if (ifFormato == 1) {
                                $("#Precio").val(respuestas[2]);
                            }
                            else {
                                $("#Precio").val(respuestas[3]);
                            }
                        }
                        else {
                            presentarMensajeToast('error', respuestas[1], 'Error');
                        }

                    },
                    error: function (data) {
                        presentarMensajeToast('error', 'Error al intentar obtener información del producto seleccionado', 'Error');
                    }
                });
            }

            //Facturado
            function calcularFacturado() {
                var cantidad = $("#Cantidad").val();
                var adicional = $("#Adicional").val();
                var bare = $("#Bare").val();

                var facturado = (parseInt(cantidad) + parseInt(adicional)) - parseInt(bare);

                $("#Facturado").val((parseInt(facturado)).toFixed(0));
            }

            $("#IdProducto").change(function () {
                obtenerDatosProducto();
            });

            $("#IdFormato").change(function () {
                obtenerDatosProducto();
            });

            $("#Cantidad").change(function () {
                calcularFacturado();
            });

            $("#Adicional").change(function () {
                calcularFacturado();
            });

            $("#Bare").change(function () {
                calcularFacturado();
            });
        });
    </script>
}